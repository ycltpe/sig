<?php  function optionFenlei($arr, $p_id = 0) { for ($i = 0; $i < count($arr); $i++) { if ($arr[$i]['p_id'] == $p_id) { echo '<option value="'.$arr[$i]['id'].'">' . $arr[$i]['name'] . '</option>'; optionFenlei($arr, $arr[$i]['id']); } } } function fenlei($arr, $p_id = 0) { $style = ''; for ($i = 0; $i < count($arr); $i++) { if ($arr[$i]['p_id'] == $p_id) { echo '<tr><td class="checkbox"><input type="checkbox" name="id[]" value="' . $arr[$i]['id'] . '" class="checkbox" /></td>
                      <td' . $style . '>' . $arr[$i]['id'] . '</td><td' . $style . '>' . $arr[$i]['name'] . '</td><td>&nbsp;</td>
                      <td><a href="' . __URL__ . '/add/p_id/' . $arr[$i]['id'] . '">添加子菜单</a> |
                         <a href="' . __URL__ . '/edit/id/' . $arr[$i]['id'] . '">编辑</a> |
                         <a href="' . __URL__ . '/delete/id/' . $arr[$i]['id'] . '">删除</a></td></tr>'; fenlei($arr, $arr[$i]['id']); } else { $style = ' style="text-indent:2em;"'; } } } function toDate($time, $format = 'Y-m-d H:i:s') { if (empty($time)) { return ''; } $format = str_replace('#', ':', $format); return date($format, $time); } function excelTime($days, $time=false) { $log = new Log(); $log->write("运行到这了。。。0。。。" . $days); if (is_numeric($days)) { $log->write("运行到这了。。。1"); $jd = GregorianToJD(1, 1, 1970); $gregorian = JDToGregorian($jd + intval($days) - 25569); $myDate = explode('/', $gregorian); $myDateStr = str_pad($myDate[2], 4, '0', STR_PAD_LEFT) . "-" . str_pad($myDate[0], 2, '0', STR_PAD_LEFT) . "-" . str_pad($myDate[1], 2, '0', STR_PAD_LEFT) . ($time ? " 00:00:00" : ''); $log->write("运行到这了。。。2"); return $myDateStr; } $log->write("运行到这了。。。3"); return $days; } function isHot($is_hot) { if ($is_hot == 0) { return '否'; } else { return '是'; } } function isAdmin($is_admin) { if ($is_admin == 2) { return '管理员'; } else { return '普通用户'; } } function DateAdd($interval, $number, $date) { $date_time_array = getdate($date); $hours = $date_time_array["hours"]; $minutes = $date_time_array["minutes"]; $seconds = $date_time_array["seconds"]; $month = $date_time_array["mon"]; $day = $date_time_array["mday"]; $year = $date_time_array["year"]; switch ($interval) { case "yyyy": $year +=$number; break; case "q": $month +=($number * 3); break; case "m": $month +=$number; break; case "y": case "d": case "w": $day+=$number; break; case "ww": $day+=($number * 7); break; case "h": $hours+=$number; break; case "n": $minutes+=$number; break; case "s": $seconds+=$number; break; } $timestamp = mktime($hours, $minutes, $seconds, $month, $day, $year); return $timestamp; } function guid() { if (function_exists('com_create_guid')) { return com_create_guid(); } else { mt_srand((double) microtime() * 10000); $charid = strtoupper(md5(uniqid(rand(), true))); $hyphen = chr(45); $uuid = chr(123) . substr($charid, 0, 8) . $hyphen . substr($charid, 8, 4) . $hyphen . substr($charid, 12, 4) . $hyphen . substr($charid, 16, 4) . $hyphen . substr($charid, 20, 12) . chr(125); return $uuid; } } function get_client_ip() { if (getenv("HTTP_CLIENT_IP") && strcasecmp(getenv("HTTP_CLIENT_IP"), "unknown")) $ip = getenv("HTTP_CLIENT_IP"); else if (getenv("HTTP_X_FORWARDED_FOR") && strcasecmp(getenv("HTTP_X_FORWARDED_FOR"), "unknown")) $ip = getenv("HTTP_X_FORWARDED_FOR"); else if (getenv("REMOTE_ADDR") && strcasecmp(getenv("REMOTE_ADDR"), "unknown")) $ip = getenv("REMOTE_ADDR"); else if (isset($_SERVER ['REMOTE_ADDR']) && $_SERVER ['REMOTE_ADDR'] && strcasecmp($_SERVER ['REMOTE_ADDR'], "unknown")) $ip = $_SERVER ['REMOTE_ADDR']; else $ip = "unknown"; return ($ip); } function cmssavecache($name = '', $fields = '') { $Model = D($name); $list = $Model->select(); $data = array(); foreach ($list as $key => $val) { if (empty($fields)) { $data [$val [$Model->getPk()]] = $val; } else { if (is_string($fields)) { $fields = explode(',', $fields); } if (count($fields) == 1) { $data [$val [$Model->getPk()]] = $val [$fields [0]]; } else { foreach ($fields as $field) { $data [$val [$Model->getPk()]] [] = $val [$field]; } } } } $savefile = cmsgetcache($name); $content = "<?php\nreturn " . var_export(array_change_key_case($data, CASE_UPPER), true) . ";\n?>"; file_put_contents($savefile, $content); } function cmsgetcache($name = '') { return DATA_PATH . '~' . strtolower($name) . '.php'; } function getStatus($status, $imageShow = true) { switch ($status) { case 1 : $showText = '禁用'; $showImg = '<IMG SRC="../Public/images/locked.gif" WIDTH="20" HEIGHT="20" BORDER="0" ALT="禁用">'; break; case 2 : $showText = '待审'; $showImg = '<IMG SRC="../Public/images/prected.gif" WIDTH="20" HEIGHT="20" BORDER="0" ALT="待审">'; break; case - 1 : $showText = '未审核'; $showImg = '<IMG SRC="../Public/images/locked.gif" WIDTH="20" HEIGHT="20" BORDER="0" ALT="未审核">'; break; case 0 : default : $showText = '正常'; $showImg = '<IMG SRC="../Public/images/ok.gif" WIDTH="20" HEIGHT="20" BORDER="0" ALT="正常">'; } return ($imageShow === true) ? $showImg : $showText; } function getUserRecommend($status) { switch ($status) { case 0 : $showText = '否'; break; case 1 : $showText = '<span style="color:red">健身专家</span>'; break; case 2 : $showText = '<span style="color:red">减肥达人</span>'; break; default : $showText = '否'; } return $showText; } function getTypes($type) { switch ($type) { case 1 : $showText = '注册用户'; break; case 2 : $showText = '腾讯QQ用户'; case 3 : $showText = '新浪微博用户'; break; default : $showText = '注册用户'; } return $showText; } function getTags($tag) { switch ($tag) { case 0 : $showText = 'ANDROID'; break; case 1 : $showText = 'IOS'; break; default : $showText = 'ANDROID'; } return $showText; } function getAchievements($achievement) { switch ($achievement) { case 1 : $showText = '自重篇'; break; case 2 : $showText = '器械篇'; break; case 3 : $showText = '有氧篇'; break; case 4 : $showText = '社交篇'; break; case 5 : $showText = '综合篇'; break; default : $showText = '自重篇'; } return $showText; } function getpublish($sta) { if ($sta == 1) { return '发布中'; } else { return '待发布'; } } function getDefaultStyle($style) { if (empty($style)) { return 'blue'; } else { return $style; } } function IP($ip = '', $file = 'UTFWry.dat') { $_ip = array(); if (isset($_ip [$ip])) { return $_ip [$ip]; } else { import("ORG.Net.IpLocation"); $iplocation = new IpLocation($file); $location = $iplocation->getlocation($ip); $_ip [$ip] = $location ['country'] . $location ['area']; } return $_ip [$ip]; } function getNodeName($id) { if (Session::is_set('nodeNameList')) { $name = Session::get('nodeNameList'); return $name [$id]; } $Group = D("Node"); $list = $Group->getField('id,name'); $name = $list [$id]; Session::set('nodeNameList', $list); return $name; } function get_pawn($pawn) { if ($pawn == 0) return "<span style='color:green'>没有</span>"; else return "<span style='color:red'>有</span>"; } function get_patent($patent) { if ($patent == 0) return "<span style='color:green'>没有</span>"; else return "<span style='color:red'>有</span>"; } function getNodeGroupName($id) { if (empty($id)) { return '未分组'; } if (isset($_SESSION ['nodeGroupList'])) { return $_SESSION ['nodeGroupList'] [$id]; } $Group = D("Group"); $list = $Group->getField('id,title'); $_SESSION ['nodeGroupList'] = $list; $name = $list [$id]; return $name; } function getCardStatus($status) { switch ($status) { case 0 : $show = '未启用'; break; case 1 : $show = '已启用'; break; case 2 : $show = '使用中'; break; case 3 : $show = '已禁用'; break; case 4 : $show = '已作废'; break; } return $show; } function showStatus($status, $id) { switch ($status) { case 1 : $info = '<a href="javascript:resume(' . $id . ')">恢复</a>'; break; case 2 : $info = '无'; break; case 0 : $info = '<a href="javascript:forbid(' . $id . ')">禁用</a>'; break; case -1 : $info = '<span style="color:red;">未审核</span>'; break; } return $info; } function showActionType($show_type) { switch ($show_type) { case 1 : $info = '自重训练'; break; case 2 : $info = '器械训练'; break; case 3 : $info = '有氧训练'; break; case 4 : $info = '操课训练'; break; default : $info = '自重训练'; } return $info; } function showRecommend($recommend, $id) { switch ($recommend) { case 1 : $info = '<a href="javascript:resumeRecommend(' . $id . ')"><span style="color:red;">取消推荐</span></a>'; break; case 0 : $info = '<a href="javascript:addRecommend(' . $id . ')">设为推荐</a>'; break; } return $info; } function showHot($is_hot, $id) { switch ($is_hot) { case 1 : $info = '<a href="javascript:resumeHot(' . $id . ')"><span style="color:red;">取消热门</span></a>'; break; case 0 : $info = '<a href="javascript:addHot(' . $id . ')">设为热门</a>'; break; } return $info; } function download($id) { $info = '<a href="javascript:toDownload(' . $id . ')">下载</a>'; return $info; } function build_verify($length = 4, $mode = 1) { return rand_string($length, $mode); } function getGroupName($id) { if ($id == 0) { return '无上级组'; } if ($list = F('groupName')) { return $list [$id]; } $dao = D("Role"); $list = $dao->findAll(array('field' => 'id,name')); foreach ($list as $vo) { $nameList [$vo ['id']] = $vo ['name']; } $name = $nameList [$id]; F('groupName', $nameList); return $name; } function sort_by($array, $keyname = null, $sortby = 'asc') { $myarray = $inarray = array(); foreach ($array as $i => $befree) { $myarray [$i] = $array [$i] [$keyname]; } switch ($sortby) { case 'asc' : asort($myarray); break; case 'desc' : case 'arsort' : arsort($myarray); break; case 'natcasesor' : natcasesort($myarray); break; } foreach ($myarray as $key => $befree) { $inarray [] = $array [$key]; } return $inarray; } function rand_string($len = 6, $type = '', $addChars = '') { $str = ''; switch ($type) { case 0 : $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz' . $addChars; break; case 1 : $chars = str_repeat('0123456789', 3); break; case 2 : $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' . $addChars; break; case 3 : $chars = 'abcdefghijklmnopqrstuvwxyz' . $addChars; break; default : $chars = 'ABCDEFGHIJKMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz23456789' . $addChars; break; } if ($len > 10) { $chars = $type == 1 ? str_repeat($chars, $len) : str_repeat($chars, 5); } if ($type != 4) { $chars = str_shuffle($chars); $str = substr($chars, 0, $len); } else { for ($i = 0; $i < $len; $i++) { $str .= msubstr($chars, floor(mt_rand(0, mb_strlen($chars, 'utf-8') - 1)), 1); } } return $str; } function pwdHash($password, $type = 'md5') { return hash($type, $password); } function showLink($id) { $info = M("Links")->where("id={$id}")->find(); switch ($info['typeid']) { case 1 : $value = '<img  src="__ROOT__/Uploads/link/' . $info['imgurl'] . '"/>'; break; case 2 : $value = $info['content']; break; } return $value; } function getnewtype($tid) { switch ($tid) { case 1 : $value = "新闻中心"; break; case 2 : $value = "技术支持"; break; } return $value; } function showLinkType($id) { $info = M("Links")->where("id={$id}")->find(); switch ($info['typeid']) { case 1 : $value = "图片链接"; break; case 2 : $value = "文字链接"; break; } return $value; } function showCaseType($typeid) { $casetype = M("Categorypro")->where("id={$typeid}")->find(); $value = $casetype['typename']; return $value; } function showDownType($typeid) { $casetype = M("Catedown")->where("id={$typeid}")->find(); $value = $casetype['typename']; return $value; } function showClassName($id) { $dao = M("Category"); $info = $dao->field('catename')->where("id={$id}")->find(); $value = $info['catename']; return $value; } function showScopeName($id) { $info = M("Catescope")->field('catename')->where("id={$id}")->find(); $value = $info['catename']; return $value; } function showDetaile($id) { $detail = M("Detailed")->where("id={$id}")->find(); $value = '<img  width="75px" height="50px" src="__ROOT__/Uploads/detail/' . $detail['imgurl'] . '"/>'; return $value; } function showDetaileType($id) { $info = M("Detailed")->where("id={$id}")->find(); $casetype = M("Case")->where("id={$info['parentid']}")->find(); $value = $casetype['proname']; return $value; } function getShort($str, $length = 25, $ext = '') { $str = htmlspecialchars($str); $str = strip_tags($str); $str = htmlspecialchars_decode($str); $strlenth = 0; $out = ''; preg_match_all("/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]{2}|[\xf0-\xff][\x80-\xbf]{3}/", $str, $match); foreach ($match[0] as $v) { preg_match("/[\xe0-\xef][\x80-\xbf]{2}/", $v, $matchs); if (!empty($matchs[0])) { $strlenth += 1; } elseif (is_numeric($v)) { $strlenth += 0.545; } else { $strlenth += 0.475; } if ($strlenth > $length) { $output .= $ext; break; } $output .= $v; } return $output; } function getcatename($id) { $gory = M("Category"); $name = $gory->where("id={$id}")->getField('catename'); return $name; } function msubstr($str, $start=0, $length, $charset="utf-8", $suffix=true) { if (function_exists("mb_substr")) { if ($suffix) { if (strlen($str) > $length) return mb_substr($str, $start, $length, $charset) . "..."; else return mb_substr($str, $start, $length, $charset); } else return mb_substr($str, $start, $length, $charset); } elseif (function_exists('iconv_substr')) { if ($suffix) { if (iconv_strlen($str) > $length) return iconv_substr($str, $start, $length, $charset) . "..."; else return iconv_substr($str, $start, $length, $charset); } else return iconv_substr($str, $start, $length, $charset); } $re['utf-8'] = "/[x01-x7f]|[xc2-xdf][x80-xbf]|[xe0-xef][x80-xbf]{2}|[xf0-xff][x80-xbf]{3}/"; $re['gb2312'] = "/[x01-x7f]|[xb0-xf7][xa0-xfe]/"; $re['gbk'] = "/[x01-x7f]|[x81-xfe][x40-xfe]/"; $re['big5'] = "/[x01-x7f]|[x81-xfe]([x40-x7e]|xa1-xfe])/"; preg_match_all($re[$charset], $str, $match); $slice = join("", array_slice($match[0], $start, $length)); if ($suffix) return $slice . "…"; return $slice; } return array ( 'app_debug' => false, 'app_domain_deploy' => false, 'app_sub_domain_deploy' => false, 'app_plugin_on' => false, 'app_file_case' => false, 'app_group_depr' => '.', 'app_group_list' => '', 'app_autoload_reg' => false, 'app_autoload_path' => 'Think.Util.', 'app_config_list' => array ( 0 => 'taglibs', 1 => 'routes', 2 => 'tags', 3 => 'htmls', 4 => 'modules', 5 => 'actions', ), 'cookie_expire' => 3600, 'cookie_domain' => '', 'cookie_path' => '/', 'cookie_prefix' => 'nhk_', 'default_app' => '@', 'default_group' => 'Home', 'default_module' => 'Index', 'default_action' => 'index', 'default_charset' => 'utf-8', 'default_timezone' => 'PRC', 'default_ajax_return' => 'JSON', 'default_theme' => 'default', 'default_lang' => 'zh-cn', 'db_type' => 'mysql', 'db_host' => 'localhost', 'db_name' => 'nahuikou', 'db_user' => 'root', 'db_pwd' => 'root', 'db_port' => '3306', 'db_prefix' => 't_', 'db_suffix' => '', 'db_fieldtype_check' => false, 'db_fields_cache' => true, 'db_charset' => 'utf8', 'db_deploy_type' => 0, 'db_rw_separate' => false, 'data_cache_time' => -1, 'data_cache_compress' => false, 'data_cache_check' => false, 'data_cache_type' => 'File', 'data_cache_path' => './Admin//Runtime/Temp/', 'data_cache_subdir' => false, 'data_path_level' => 1, 'error_message' => '您浏览的页面暂时发生了错误！请稍后再试～', 'error_page' => '', 'html_cache_on' => false, 'html_cache_time' => 60, 'html_read_type' => 0, 'html_file_suffix' => '.shtml', 'lang_switch_on' => false, 'lang_auto_detect' => true, 'log_exception_record' => true, 'log_record' => false, 'log_file_size' => 2097152, 'log_record_level' => array ( 0 => 'EMERG', 1 => 'ALERT', 2 => 'CRIT', 3 => 'ERR', ), 'page_rollpage' => 5, 'page_listrows' => 20, 'session_auto_start' => true, 'show_run_time' => true, 'show_adv_time' => true, 'show_db_times' => true, 'show_cache_times' => true, 'show_use_mem' => true, 'show_page_trace' => false, 'show_error_msg' => true, 'tmpl_engine_type' => 'Think', 'tmpl_detect_theme' => false, 'tmpl_template_suffix' => '.html', 'tmpl_content_type' => 'text/html', 'tmpl_cachfile_suffix' => '.php', 'tmpl_deny_func_list' => 'echo,exit', 'tmpl_parse_string' => array ( '__SELFPUBLIC__' => '/Admin/Tpl/default/GROUP_NAME/Public', ), 'tmpl_l_delim' => '{', 'tmpl_r_delim' => '}', 'tmpl_var_identify' => 'array', 'tmpl_strip_space' => false, 'tmpl_cache_on' => true, 'tmpl_cache_time' => -1, 'tmpl_action_error' => 'Public:success', 'tmpl_action_success' => 'Public:success', 'tmpl_trace_file' => './ThinkPHP//Tpl/PageTrace.tpl.php', 'tmpl_exception_file' => './ThinkPHP//Tpl/ThinkException.tpl.php', 'tmpl_file_depr' => '/', 'taglib_begin' => '<', 'taglib_end' => '>', 'taglib_load' => true, 'taglib_build_in' => 'cx', 'taglib_pre_load' => '', 'tag_nested_level' => 3, 'tag_extend_parse' => '', 'token_on' => false, 'token_name' => '__hash__', 'token_type' => 'md5', 'url_case_insensitive' => false, 'url_router_on' => true, 'url_route_rules' => array ( ), 'url_model' => 1, 'url_pathinfo_model' => 2, 'url_pathinfo_depr' => '/', 'url_html_suffix' => '.html', 'var_group' => 'g', 'var_module' => 'm', 'var_action' => 'a', 'var_router' => 'r', 'var_page' => 'p', 'var_template' => 't', 'var_language' => 'l', 'var_ajax_submit' => 'ajax', 'var_pathinfo' => 's', 'mail_username' => 'nhkopen@163.com', 'mail_password' => 'Aa123456', 'mail_from' => 'nhkopen@163.com', 'mail_fromname' => '拿回扣管理团队', 'mail_host' => 'smtp.163.com', 'site_title' => '拿回扣后台管理中心', 'user_auth_on' => true, 'user_auth_type' => 1, 'user_auth_key' => 'nhk_authId', 'admin_auth_key' => 'administrator', 'user_auth_model' => 'AdminUser', 'auth_pwd_encoder' => 'md5', 'user_auth_gateway' => '/Public/login', 'not_auth_module' => 'Public', 'require_auth_module' => '', 'not_auth_action' => '', 'require_auth_action' => '', 'guest_auth_on' => false, 'guest_auth_id' => 0, 'db_like_fields' => 'title|remark', 'rbac_role_table' => 't_role', 'rbac_user_table' => 't_role_user', 'rbac_access_table' => 't_access', 'rbac_node_table' => 't_node', ); ?>